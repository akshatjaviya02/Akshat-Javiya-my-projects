# -*- coding: utf-8 -*-
"""ML_final_Project 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fhe1z9C9qbRp3DrsJ0eLFNvcL8oeCu4t

# Libraries imported
"""

import numpy as np
from google.colab import drive
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import KFold

"""# Import of dataset from drive"""

drive.mount('/content/drive/')
data = pd.read_csv('/content/drive/My Drive/Colab Notebooks/data.csv')
data.shape
data2 = data.copy()
# https://www.kaggle.com/code/umutky/spotify-ml/notebook#Model

"""# Cleaning the dataset"""

data2 = data2.drop(labels=["id", "artists", "name", "release_date"], axis=1)
data2.head()

"""# User Input"""

print("Recommendation options: valence, acousticness, danceability, duration_ms, energy, explicit, \n\t\t\tinstrumentalness, liveness, loudness, popularity, speechiness, and tempo.")
user_input = input("Enter either for recommendation: ")

"""# Random Forest"""

X = data2.drop(user_input, axis=1)
y = data2[user_input]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)

model_rf = RandomForestRegressor()
model_rf.fit(X_train, y_train)

y_pred_rf = model_rf.predict(X_test)
mse_rf = mean_squared_error(y_test, y_pred_rf)
mae_rf = mean_absolute_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)
print(f"Mean Squared Error (MSE): {mse_rf}")
print(f"Mean Absolute Error (MAE): {mae_rf}")
print(f"R-squared (R2): {r2_rf}")

predict_all = model_rf.predict(X)

"""# Results for Random Forest"""

dance = pd.DataFrame(model_rf.predict(X))
dance = dance.rename(columns={0: user_input})

index = dance.sort_values(by=user_input, ascending=False)[:50].index
playlist = data.loc[index]

playlist

"""# KNN Model"""

Kfold = KFold(n_splits=5)
model_knn = KNeighborsRegressor(n_neighbors=5,  metric='minkowski', p=2)

for train_index, test_index in Kfold.split(X):
    x_train, x_test = X.iloc[train_index, :], X.iloc[test_index, :]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    model_knn.fit(x_train, y_train)
    predict = model_knn.predict(x_test)
    mse_KNN = mean_squared_error(y_test, predict)
    mae_KNN = mean_absolute_error(y_test, predict)
    r2_KNN = r2_score(y_test, predict)
    print(f"Mean Squared Error (MSE): {mse_KNN}")
    print(f"Mean Absolute Error (MAE): {mae_KNN}")
    print(f"R-squared (R2): {r2_KNN}")

"""# Results of KNN Model"""

model_knn.predict(X)
recommendation = pd.DataFrame(model_knn.predict(X))
recommendation = recommendation.rename(columns={0: user_input})
index = recommendation.sort_values(by=user_input, ascending=False)[:50].index
playlist = data.loc[index]

playlist
